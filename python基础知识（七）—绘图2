#############################################
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

plt.style.use('ggplot')
plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus']=False

###（1）折线图
#（1.1）对公众号阅读人数画折线图(8月至9月28日数据）,D:\222学习\数据分析案例资料\wechart.xlsx

df=pd.read_excel(r'D:\222学习\数据分析案例资料\wechart.xlsx')
df.head()

df1=df.loc[df.date>='2017-08-01',:]
print(df1.head())

fig=plt.figure(figsize=(10,6))

plt.plot(df1.date,
        df1.article_reading_cnts,
         linestyle='-',
         linewidth=2,
         color='steelblue',
         marker='o',
         markersize=6,
         markeredgecolor='black',
         markerfacecolor='brown'
        )
plt.title('公众号每天阅读人数趋势图')
plt.xlabel('日期')
plt.ylabel('人数')

plt.tick_params(top='off',right='off')

ax=plt.gca()
date_format=mpl.dates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(date_format)

xlocator=mpl.ticker.MultipleLocator(5)
ax.xaxis.set_major_locator(xlocator)

fig.autofmt_xdate(rotation=45)
plt.show()


#(1.2)阅读人数和人次的折线图
fig=plt.figure(figsize=(10,6))

plt.plot(df1.date,
        df1.article_reading_cnts,
        linestyle='-',
        linewidth=2,
        color='steelblue',
        marker='o',
        markersize=6,
        markeredgecolor='black',
        markerfacecolor='steelblue',
        label='阅读人数')

plt.plot(df1.date,
        df1.article_reading_times,
        linestyle='-',
         linewidth=2,
         color='#ff9999',
         marker='o',
         markersize=6,
         markeredgecolor='black',
         markerfacecolor='#ff9999',
         label='阅读人次'
        )

plt.tick_params(top='off',right='off')

ax=plt.gca()
date_format=mpl.dates.DateFormatter('%m-%d')
ax.xaxis.set_major_formatter(date_format)

alocator=mpl.ticker.MultipleLocator(3)
ax.xaxis.set_major_locator(xlocator)

fig.autofmt_xdate(rotation=45)

plt.legend()
plt.show()

##################################################
###(2)散点图
#（2.1）对汽车数据绘制汽车速度与刹车距离的关系图，'D:\222学习\数据分析案例资料\cars.csv'
cars=pd.read_csv(r'D:\222学习\数据分析案例资料\cars.csv',engine='python')
cars.head()
plt.scatter(cars.speed,
           cars.dist,
           s=30,
           c='steelblue',
           marker='s',
           alpha=0.9,
           linewidth=0.3,
           edgecolors='red'
           )
plt.title('汽车速度与刹车距离的关系')
plt.xlabel('汽车速度')
plt.ylabel('刹车距离')

plt.tick_params(top='off',right='off')
plt.show()

#(2.2)绘制iris数据中花瓣长度和宽度的关系图，且不同花种标不同颜色
#'D:\222学习\数据分析案例资料\iris.csv'
iris=pd.read_csv(r'D:\222学习\数据分析案例资料\iris.csv',engine='python')
colors=['steelblue','#9999ff','#ff9999']
Species=iris.Species.unique()


for i in range(len(Species)):
    plt.scatter(iris.loc[iris.Species==Species[i],'Petal.Length'],
               iris.loc[iris.Species==Species[i],'Petal.Width'],
               s=35,
                c=colors[i],
                label=Species[i]
               )
    
plt.title('花瓣长度与宽度的关系')
plt.xlabel('花瓣长度')
plt.ylabel('花瓣宽度')

plt.tick_params(top='off',right='off')
plt.legend(loc='upper left')

plt.show()

#(2.3)展示各个大区的完成率和利润率和总任务量情况
#'D:\222学习\数据分析案例资料\sales.xlsx'

sales=pd.read_excel(r'D:\222学习\数据分析案例资料\sales.xlsx')
sales.head()

plt.scatter(sales.finish_ratio,
           sales.profit_ratio,
           c='steelblue',
           s=sales.tot_target/30,
           edgecolor='black')

plt.xticks(np.arange(0,1,0.1),[ str(i*100)+'%' for i in np.arange(0,1,0.1)])
plt.yticks(np.arange(0,1,0.1),[ str(i*100)+'%' for i in np.arange(0,1,0.1) ])
            
plt.xlim(0.2,0.7)
plt.ylim(0.25,0.85)

plt.title('完成率与利润率的关系')
plt.xlabel('完成率')
plt.ylabel('利润率')

plt.tick_params(top='off',right='off')
plt.show()

#(2.4）汽车速度和刹车距离的关系，并描绘回归线
from sklearn.linear_model import LinearRegression

plt.scatter(cars.speed,
           cars.dist,
           s=30,
           c='black',
           marker='o',
           alpha=0.9,
           linewidths=0.3,
           label='观测值'
           )

reg=LinearRegression().fit(cars.speed.reshape(-1,1),cars.dist)

pred=reg.predict(cars.speed.reshape(-1,1))

plt.plot(cars.speed,pred,linewidth=2,label='回归线')

plt.title('汽车速度与刹车距离的关系')
plt.xlabel('汽车速度')
plt.ylabel('刹车距离')

plt.tick_params(top='off',right='off')
plt.legend(loc='upper left')

plt.show()

###############################################
###(3)雷达图
#(3.1)对个人能力、qc知识、解决问题能力、服务质量意识、团队精神绘制雷达图
#数据[3.2,2.1,3.5,2.8,3]

values=[3.2,2.1,3.5,2.8,3]
feature=['个人能力','QC知识','解决问题能力','服务质量意识','团队精神']

N=len(values)
#设置雷达图的角度，用于平分切开一个圆面
angles=np.linspace(0,2*np.pi,N,endpoint=False)
#为了使雷达图一圈封闭起来，需要下面的步骤
values=np.concatenate((values,[values[0]]))
angles=np.concatenate((angles,[angles[0]]))

fig=plt.figure()
#这里一定要设置为极坐标格式
ax=fig.add_subplot(111,polar=True)
#绘制折线图
ax.plot(angles,values,'o-',linewidth=2)
#填充颜色
ax.fill(angles,values,alpha=0.25)
#添加每个特征的标签
ax.set_thetagrids(angles*180/np.pi,feature)
#设置雷达图范围
ax.set_ylim(0,5)
plt.title('活动前后员工状态表现')
#添加网格线
ax.grid(True)
plt.show()

#（3.2）绘制两条雷达图
#数据1[3.2,2.1,3.5,2.8,3]
#数据2[4,4.1,4.5,4,4.1]
#特征['个人能力','QC知识','解决问题能力','服务质量意识','团队精神']

values=[3.2,2.1,3.5,2.8,3]
values2=[4,4.1,4.5,4,4.1]
feature=['个人能力','QC知识','解决问题能力','服务质量意识','团队精神']

N=len(values)
#设置雷达图的角度，用于平分切开一个圆面
angles=np.linspace(0,2*np.pi,N,endpoint=False)
#为了使雷达图一圈封闭起来，需要下面的步骤
values=np.concatenate((values,[values[0]]))
values2=np.concatenate((values2,[values2[0]]))
angles=np.concatenate((angles,[angles[0]]))

#绘图
fig=plt.figure()
ax=fig.add_subplot(111,polar=True)

#绘制折线图
ax.plot(angles,values,'o-',linewidth=2,label='活动前')
#填充颜色
ax.fill(angles,values,alpha=0.25)
#绘制第二条折线图
ax.plot(angles,values2,'o-',linewidth=2,label='活动后')
ax.fill(angles,values2,alpha=0.25)

#添加每个特征的标签
ax.set_thetagrids(angles*180/np.pi,feature)
#设置雷达图的范围
ax.set_ylim(0,5)
plt.title('活动前后员工状态表现')

#添加网格线
ax.grid(True)
#设置图例
plt.legend(loc='best')
plt.show()

#(3.3)使用第三方模块绘制雷达图
import pygal
#调用Radar这个类，并设置雷达图的填充，及数据范围
radar_chart=pygal.Radar(fill=True,range=(0,5))
#添加雷达图的标题
radar_chart.title='活动前后员工状态表现'
#添加雷达图各项点的含义
radar_chart.x_labels=feature
#绘制两条雷达图区域
radar_chart.add('活动前',values)
radar_chart.add('活动后',values2)

#保存图像
radar_chart.render_to_file('radar_chart.svg')
