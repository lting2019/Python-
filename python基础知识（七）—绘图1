#############################################
###(1)柱形图
#（1.1）对北京、上海、天津、重庆的GDP[12406.8,13908.57,9386.87,9143.64]做柱形图
import matplotlib.pyplot as plt
GDP=[12406.8,13908.57,9386.87,9143.64]
plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus']=False

plt.bar(range(4),GDP,align='center',color='steelblue',alpha=0.8)

plt.ylabel('GDP')
plt.title('直辖市GDP')
plt.xticks(range(4),['北京','上海','天津','重庆'])
plt.ylim([5000,15000])

for x,y in enumerate(GDP):
    plt.text(x,y+100,'%s'%round(y,1),ha='center')
plt.show()

#(1.2)对天猫、京东、中国图书网、当当网、亚马逊的同一本的价格[33.34,38.9,45.4,39.9,39.5]做条形图
#标题为不同平台书的最低价格比较

price=[33.34,38.9,45.4,39.9,39.5]

plt.barh(range(5),price,align='center',color='steelblue',alpha=0.8)

plt.xlabel('价格')
plt.title('不同平台书的最低价格比较')
plt.yticks(range(5),['亚马逊','当当网','中国图书网','京东','天猫'])
plt.xlim([32,47])

for x,y in enumerate(price):
    plt.text(y+0.1,x,'%s'%y,va='center')
    
plt.show()

#(1.3)展示北京、上海、香港、深圳、广州的2016和2017年亿万财富家庭的数量
#2016=[15600,12700,11300,4270,3620],2017=[17400,14800,12000,5200,4020]

import numpy as np
Y2017=[17400,14800,12000,5200,4020]
Y2016=[15600,12700,11300,4270,3620]
labels=['北京','上海','香港','深圳','广州']
bar_width=0.45

plt.bar(np.arange(5),Y2016,label='2016',color='steelblue',alpha=0.8,width=bar_width)
plt.bar(np.arange(5)+bar_width,Y2017,label='2017',color='indianred',alpha=0.8,width=bar_width)

plt.xlabel('城市')
plt.ylabel('家庭数量')
plt.title('亿万财富家庭TOP5城市分布')
plt.legend()

plt.xticks(np.arange(5)+bar_width,labels)
plt.ylim([2500,19000])

for x2016,y2016 in enumerate(Y2016):
    plt.text(x2016,y2016+100,'%s'%y2016,ha='center')
    
for x2017,y2017 in enumerate(Y2017):
    plt.text(x2017+bar_width,y2017+100,'%s'%y2017,ha='center')
    
plt.show()

#(1.4)对数据货运数据hy做堆积柱形图
import pandas as pd
data=pd.DataFrame({'index':['铁路','公路','水运','民航'],'Jan':[31058,255802,52244,57],
                 'Feb':[28121,179276,46482,42],'Mar':[32185,285446,50688,57]},columns=['index','Jan','Feb','Mar'])
print(data.iloc[:1,1:])

plt.bar(np.arange(3),data.loc[0,:][1:],color='red',alpha=0.8,label='铁路',align='center')
plt.bar(np.arange(3),data.loc[1,:][1:],bottom=data.loc[0,:][1:],color='green',alpha=0.8,label='公路',align='center')
plt.bar(np.arange(3),data.loc[2,:][1:],bottom=data.loc[0,:][1:]+data.loc[1,:][1:],color='m',alpha=0.8,label='水运',align='center')
plt.bar(np.arange(3),data.loc[3,:][1:],bottom=data.loc[0,:][1:]+data.loc[1,:][1:]+data.loc[2,:][1:],color='black',alpha=0.8,label='民航',align='center')

plt.xlabel('月份')
plt.ylabel('货物量（万吨）')
plt.title('2017年第一季度物流运输量')

plt.xticks(np.arange(3),data.columns[1:])
plt.ylim([0,500000])

for x_t,y_t in enumerate(data.loc[0,:][1:]):
    plt.text(x_t,y_t/2,'%sW'%round(y_t/10000,2),ha='center',color='white')

for x_g,y_g in enumerate(data.loc[0,:][1:]+data.loc[1,:][1:]):
    plt.text(x_g,y_g/2,'%sW'%round(y_g/10000,2),ha='center',color='white')

for x_s,y_s in enumerate(data.loc[0,:][1:]+data.loc[1,:][1:]+data.loc[2,:][1:]):
    plt.text(x_s,y_s/2,'%sW'%round(y_s/10000,2),ha='center',color='white')
    
plt.legend(loc='upper center',ncol=4)
plt.show()

##################################################################################
###(2)饼图
#(2.1)对教育程度占比绘制饼图，标题为失信教育程度分布,突出大专人群
#中专、大专、本科、硕士、其他占比分别为[0.2515,0.3724,0.3336,0.0368,0.0057]

edu=[0.2515,0.3724,0.3336,0.0368,0.0057]
labels=['中专','大专','本科','硕士','其他']

explode=[0,0.1,0,0,0]

colors=['#9999ff','#ff9999','#7777aa','#2442aa','#dd5555']
plt.style.use('ggplot')

plt.axes(aspect='equal')

plt.xlim(0,4)
plt.ylim(0,4)

plt.pie(x=edu,
       explode=explode,
       labels=labels,
       colors=colors,
       autopct='%.1f%%',
       pctdistance=0.8,
        shadow=True,
       labeldistance=1.15,
       startangle=180,
       radius=1.5,
       counterclock=False,
       wedgeprops={'linewidth':1.5,'edgecolor':'green'},
        textprops={'fontsize':12,'color':'k'},
        center=(1.8,1.8),
        frame=1
       )

plt.xticks(())
plt.yticks(())
plt.title('失信教育程度分布')

plt.show()

############################################################
###（3）箱线图
#'D:\222学习\猴子大数据学习\数据分析（中级）（Python）\第4关：机器学习（入门）\3.泰坦尼克号\train.csv'
#（3.1）对泰坦尼克号数据中对整体乘客的年龄做箱线图
tit=pd.read_csv(r'D:\222学习\猴子大数据学习\数据分析（中级）（Python）\第4关：机器学习（入门）\3.泰坦尼克号\train.csv',engine = 'python')
tit.head()

any(tit.Age.isnull())
tit.dropna(subset=['Age'],inplace=True)
any(tit.Age.isnull())

plt.style.use('ggplot')
plt.boxplot(x=tit.Age,
           patch_artist=True,
            showmeans=True,
            boxprops={'color':'black','facecolor':'#9999ff'},
            flierprops={'marker':'o','markerfacecolor':'red','color':'black'},
            meanprops={'marker':'D','markerfacecolor':'indianred'},
            medianprops={'linestyle':'--','color':'orange'} 
           )
plt.ylim(0,85)
plt.tick_params(top='off',right='off')
plt.show()

#(3.2)不同等级仓的年龄箱线图
tit.sort_values(by='Pclass',inplace=True)

Age=[]
levels=tit.Pclass.unique()
for Pclass in levels:
    Age.append(tit.loc[tit.Pclass==Pclass,'Age'])
    
plt.boxplot(x=Age,
           patch_artist=True,
           labels=['一等舱','二等舱','三等舱'],
           showmeans=True,
           boxprops={'color':'black','facecolor':'#9999ff'},
           flierprops={'marker':'o','markerfacecolor':'red','color':'black'},
           meanprops={'marker':'D','markerfacecolor':'indianred'},
           medianprops={'linestyle':'--','color':'orange'}
           )
plt.show()
'''将等舱的年龄数据装在列表中，使用列表Age做画图的数据源'''

########################################################
###（4）直方图
#（4.1）用直方图表示整体乘客的年龄
import matplotlib.mlab as mlab


plt.hist(tit.Age,
        bins=20,
        color='steelblue',
        edgecolor='k',
        label='直方图')

plt.tick_params(top='off',right='off')
plt.legend()

plt.show()

#(4.2)将乘客年龄绘制累计频率直方图
plt.hist(tit.Age,
        bins=np.arange(tit.Age.min(),tit.Age.max(),5),
         normed=True,
         cumulative=True,
         color='steelblue',
         edgecolor='k',
         label='直方图'
        )

plt.title('乘客年龄的频率累计直方图')
plt.xlabel('年龄')
plt.ylabel('累计频率')

plt.tick_params(top='off',right='off')
plt.legend(loc='best')

plt.show()

#(4.3)为乘客年龄画直方图和理论整体分布曲线和核密度曲线

plt.hist(tit.Age,
        bins=np.arange(tit.Age.min(),tit.Age.max(),5),
        normed=True,
        color='steelblue',
        edgecolor='k')
plt.title('乘客年龄直方图')
plt.xlabel('年龄')
plt.ylabel('频率')

x1=np.linspace(tit.Age.min(),tit.Age.max(),1000)
normal=mlab.normpdf(x1,tit.Age.mean(),tit.Age.std())
line1,=plt.plot(x1,normal,'r-',linewidth=2)

kde=mlab.GaussianKDE(tit.Age)
x2=np.linspace(tit.Age.min(),tit.Age.max(),1000)
line2,=plt.plot(x2,kde(x2),'g-',linewidth=2)

plt.tick_params(top='off',right='off')
plt.legend([line1,line2],['正态分布曲线','核密度曲线'],loc='best')

plt.show()

'''右偏特征表示右边拖尾'''

#（4.4）对比男女乘客年龄的直方图
age_F=tit.Age[tit.Sex=='female']
age_M=tit.Age[tit.Sex=='male']

plt.hist(age_F,
        bins=np.arange(tit.Age.min(),tit.Age.max(),2),
         label='男性',
         color='steelblue',
         alpha=0.7
        )

plt.hist(age_M,
        bins=np.arange(tit.Age.min(),tit.Age.max(),2),
         label='女性',
         alpha=0.6
        )

plt.title('乘客年龄直方图')
plt.xlabel('年龄')
plt.ylabel('人数')

plt.tick_params(top='off',right='off')
plt.legend()

plt.show()
