import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# 使用横向连接构建向量
a=np.r_[3,[0]*5,-1:1:10j]
a

# 使用堆叠构建向量
np.mgrid[0:5,0:5]

np.mgrid[0:5:4j,0:5:4j]

# ===================构建多项式================================================

from numpy import poly1d # 一维多项式

# 语法 np.poly1d(列表系数，r=False，variable='x'),r=True表示系数为根，默认为系数,
# variable表示变量符号

p=poly1d([3,4,5])
print(p) # 返回3x^2+4x+5

print(p*p) # 返回9x^4+24x^3+46x^2+40x+25

np.poly1d([1, -1]) * np.poly1d([1, -2])

# poly1d的属性
# c 表示多项式系数副本,o表示最高阶数，r表示根，variable表示变量名称

# 方法
# _call_ （）将自己称为功能，deriv（）返回多项式导数，integ(}返回反导数（不定积分）

# =====================矢量化函数==================================================
# 将标量化函数转化为矢量化函数：np.vectorize（函数名）
def addsubtract(a,b):
    if a > b:
        return a - b
    else:
        return a + b
#它定义了两个标量变量的函数并返回
vec_addsubtract = np.vectorize(addsubtract)

vec_addsubtract([0,3,6,9],[1,3,5,7])

# ====================条件选择=====================================================
x=np.r_[-2:3]

np.select([x>3,x>=0],[0,x+2])
np.where(x>1,1,0)

# ===================计算确定的积分================================================
from scipy import integrate
# 
x2= lambda x:x**2
# 求0-4之间的积分
integrate.quad(x2,0,4)

# np.inf表示无穷
invexp=lambda x:np.exp(-x)
integrate.quad(invexp,0,np.inf)

# 
f =lambda x,a:a*x
y,err=integrate.quad(f,0,1,args=(1,))
y

# =======================优化：多变量标量函数的无约束最小化===============================
import numpy as np
from scipy.optimize import minimize

def rosen(x):
    return sum(100*(x[1:]-x[:-1]**2)**2+(1-x[:-1])**2)

x0=np.array([1.3,0.7,0.8,1.9,1.2])

res=minimize(rosen,x0,method='nelder-mead',
            options={'xtol':1e-8,'disp':True})
res.x

# =========================插值=====================================================
# 一维插值
from scipy.interpolate import interp1d

x=np.linspace(0,10,num=11,endpoint=True)
y=np.cos(-x**2/9)
f=interp1d(x,y)# 默认线性插值
f2=interp1d(x,y,kind='cubic')

xnew=np.linspace(0,10,num=41,endpoint=True)

plt.plot(x,y,'o',xnew,f(xnew),'-',xnew,f2(xnew),'--')
plt.legend(['data','linear','cubic'],loc='best')
plt.show()

# 多变量数据插值
# 二维函数
def func(x,y):
    return x*(1-x)*np.cos(4*np.pi*x)*np.sin(4*np.pi*y**2)**2

# 在【0,1】*【0,1】的网格上
grid_x,grid_y=np.mgrid[0:1:100j,0:1:200j]

# 只知道1000个数据点
points=np.random.rand(1000,2)
values=func(points[:,0],points[:,1])

# 尝试插值
from scipy.interpolate import griddata
grid_z0=griddata(points,values,(grid_x,grid_y),method='nearest')
grid_z1=griddata(points,values,(grid_x,grid_y),method='linear')
grid_z2=griddata(points,values,(grid_x,grid_y),method='cubic')

plt.subplot(221)
plt.imshow(func(grid_x,grid_y).T,extent=(0,1,0,1),origin='lower')
plt.plot(points[:,0],points[:,1],'r',ms=1)
plt.title('Original')
plt.subplot(222)
plt.imshow(grid_z0.T,extent=(0,1,0,1),origin='lower')
plt.title('Nearest')
plt.subplot(223)
plt.imshow(grid_z1.T,extent=(0,1,0,1),origin='lower')
plt.title('Linear')
plt.subplot(224)
plt.imshow(grid_z2.T,extent=(0,1,0,1),origin='lower')
plt.title('Cubic')
plt.gcf().set_size_inches(6,6)
plt.show()
# ======================傅里叶变换===================================================
# 傅里叶分析是一种将函数表示为周期分量之和以及从这些分量中恢复信号的方法
# 一维离散傅里叶变换
from scipy.fftpack import fft,ifft
x=np.array([1.0,2.0,1.0,-1.0,1.5])
y=fft(x)
y

yinv=ifft(y)
yinv
# 
n=600
t=1/800
x=np.linspace(0,n*t,n)
y=np.sin(50*2*np.pi*x)+0.5*np.sin(80*2*np.pi*x)
yf=fft(y)
xf=np.linspace(0,1/(2*t),n//2)
plt.plot(xf,2/n*np.abs(yf[0:n//2]))
plt.grid()
plt.show()

# ========================信号处理==================================================
# B 样条
import numpy as np
from scipy import signal,misc
import matplotlib.pyplot as plt

image=misc.face(gray=True).astype(np.float32)
derfilt=np.array([1,-2,1],dtype=np.float32)
ck=signal.cspline2d(image,8)
deriv=(signal.sepfir2d(ck,derfilt,[1])+signal.sepfir2d(ck,[1],derfilt))

laplacian=np.array([[0,1,0],[1,-4,1],[0,1,0]],dtype=np.float32)
deriv2=signal.convolve2d(ck,laplacian,mode='same',boundary='symm')
plt.figure()
plt.imshow(image)
plt.gray()
plt.title('Original image')
plt.show()

plt.figure()
plt.imshow(deriv)
plt.gray()
plt.title('Output of spline edge filter')
plt.show()

# 过滤,模糊1
image=misc.face(gray=True)
w=np.zeros((50,50))
w[0][0]=1
w[49][25]=1
image_new=signal.fftconvolve(image,w)
plt.figure()
plt.imshow(image_new)
plt.title('Filtered image')
plt.show()

# 过滤,模糊2
image=misc.ascent()
w=signal.gaussian(50,10)
image_new=signal.sepfir2d(image,w,w)
plt.figure()
plt.imshow(image)
plt.gray()
plt.title('Original image')
plt.show()

plt.figure()
plt.imshow(image_new)
plt.gray()
plt.title('Filtered image')
plt.show()

# ====================线性代数=================================================
# 创建矩阵
A=np.array([[1,2],[3,4]])

from scipy import linalg

# 求矩阵的逆AB=I，B为A的逆
linalg.inv(A)

b=np.array([[5,6]]) #2d array

# 转置
b.T

# A*b 不是矩阵乘法

# A.dot(b.T) # 矩阵乘法

b=np.array([5,6])# 1d array,不能转置，也不能和相乘

# 求解线性系统

from scipy import linalg
A=np.array([[1,2],[3,4]])
b=np.array([[5],[6]])
linalg.inv(A).dot(b)# 慢方法
np.linalg.solve(A,b)# 快方法
# 检查快方法
A.dot(np.linalg.solve(A,b))-b # A为方程左边，b为右边

# 寻找行列式

from scipy import linalg
A=np.array([[1,2],[3,4]])
linalg.det(A)

# 计算范数

A=np.array([[1,2],[3,4]])
linalg.norm(A)
linalg.norm(A,'fro')
linalg.norm(A,-1)
linalg.norm(A,np.inf)

# 线性解决最小二乘估计
c1,c2=5,2
i=np.r_[1:11]
xi=0.1*i
yi=c1*np.exp(-xi)+c2*xi
zi=yi+0.05*np.max(yi)*np.random.randn(len(yi))

A=np.c_[np.exp(-xi)[:,np.newaxis],xi[:,np.newaxis]]
c,resid,rank,sigma=linalg.lstsq(A,zi)

xi2=np.r_[0.1:1:100j]
yi2=c[0]*np.exp(-xi2)+c[1]*xi2

plt.plot(xi,zi,'x',xi2,yi2)
plt.axis([0,1.1,3,5.5,])
plt.xlabel('$x_i$')
plt.title('Data fitting with linalg.lstsq')
plt.show()

# 特征值和特征向量

import numpy as np
from scipy import linalg

A=np.array([[1,2],[3,4]])
la,v=linalg.eig(A)
l1,l2=la
print(l1,l2)
print(v[:,0])
print(v[:,1])
print(np.sum(abs(v**2),axis=0))
v1=np.array(v[:,0]).T
print(linalg.norm(A.dot(v1)-l1*v1))
 
# 奇异值分解

A = np.array([[1,2,3],[4,5,6]])
m,n=A.shape
      
u,s,vh=linalg.svd(A)
sig=linalg.diagsvd(s,m,n)
print(u,'\n',s,'\n',vh)

# =======================ARPACK稀疏特征值问题==================================
import numpy as np
from scipy.linalg import eigh
from scipy.sparse.linalg import eigsh
np.set_printoptions(suppress=True)

np.random.seed(0)
X=np.random.random((100,100))-0.5
evals_all,evecs_all=eigh(X)
evals_large,evecs_large=eigsh(X,3,which='LM')
print(evals_all[-3:],'\n',evals_large,'\n')

# ==============空间数据结构和算法===========================================

# ===============统计=========================================================

